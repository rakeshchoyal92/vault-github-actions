name: OIDC Access Test

on: push

permissions:
  id-token: write
  contents: read

jobs:
  read-secret:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2
      - name: perform token run
        run: |
          echo $(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=rakeshchoyal92" | base64)

      # Shout out to Benjamin Pannell at Sierra Softworks for this
      # https://sierrasoftworks.com/2021/12/20/vault-github-actions/#policies
      - name: Troubleshooting
        run: |
          curl -sSL -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL" | \
          jq "{ jwt: .value, role: \"$VAULT_ROLE\" }" > ./token.json          

          
          echo 'GitHub Actions Token Claims'
          cat ./token.json | jq -r '.jwt | split(".") | .[1] | @base64d' | jq
          cat ./token.json | jq -r '.jwt | split(".") | .[1]'

          echo 'Vault Login Response'
          curl -sSLf -X POST -H "Content-Type: application/json" -H "X-Vault-Namespace: $VAULT_NAMESPACE" --data @token.json $VAULT_URL/v1/auth/$VAULT_AUTH_PATH/login

          # Remove the token file when we're done (if we don't fail)
          rm ./token.json
        env:
          VAULT_URL: ${{ vars.VAULT_ADDR }}
          VAULT_AUTH_PATH: jwt
          VAULT_ROLE: ${{ vars.VAULT_ROLE }}
          VAULT_NAMESPACE: ${{ vars.VAULT_NAMESPACE }}
      # Retrieve the secrets from Vault
      - name: Retrieve Secrets
        id: secretdata
        uses: hashicorp/vault-action@v2
        with:
          method: jwt
          url: ${{ vars.VAULT_ADDR }}
          namespace: ${{ vars.VAULT_NAMESPACE }}
          role: ${{ vars.VAULT_ROLE }}
          secrets: secrets/data/dockerhub password | MY_PASSWORD
      # Print the secrets (not recommended)
      - name: Print Secrets
        run: |
          echo '${{ steps.secretdata.outputs.MY_PASSWORD }}'
